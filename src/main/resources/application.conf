akka {

//  loggers = ["akka.event.Logging$DefaultLogger"]
  loglevel = "DEBUG"

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
  }
  remote {
    log-remote-lifecycle-events = off
    netty.tcp {
      hostname = "127.0.0.1"
      hostname = ${?BIND_HOST}
      port = 6001
    }
  }

  http {
    server.parsing.illegal-header-warnings = off
    client.parsing.illegal-header-warnings = off
  }

  cluster {
    seed-nodes = [
      "akka.tcp://KVStore@127.0.0.1:6001",
      "akka.tcp://KVStore@127.0.0.1:6002",
      "akka.tcp://KVStore@127.0.0.1:6003"]

    roles = [manager]

    # Home made static quorum - split brain resolver
    # Failover = Failure detection (5s for 3 nodes) + stable-after + down-removal-margin

    # After this time period, the reachability changes are assumed to be stable
    # and corresponding decisions will be made by the split brain resolver
    stable-after = 5s

    quorum-size = 1

    # Lag until a new ice manager that belonged to a downed/removed network partition is
    # created in the surviving partition. This margin ensures that a new ice manager is not
    # created before the old one is stopped. This is possible as the failure detector can mark the
    # the other side of the partition as unreachable at different points in time (on each side)
    down-removal-margin = ${akka.cluster.stable-after}

    # The stable-after feature in the home made split brain functionality makes use of the
    # standard akka cluster auto down feature
    auto-down-unreachable-after = ${akka.cluster.stable-after}

    # Only mark members as UP after the quorum-size is achieved when the cluster is started. This
    # parameter only applies when the cluster is started for the very first time.
    min-nr-of-members = ${akka.cluster.quorum-size}

  }

  log-dead-letters = off
}